////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Autodesk, Inc. All rights reserved 
// Written by Philippe Leefsma 2009-2010 - ADN/Developer Technical Services
//
// Feedback and questions: Philippe.Leefsma@Autodesk.com
//
// This software is provided as is, without any warranty that it will work. You choose to use this tool at your own risk.
// Neither Autodesk nor the author Philippe Leefsma can be taken as responsible for any damage this tool can cause to 
// your data. Please always make a back up of your data prior to use this tool, as it will modify the documents involved 
// in the feature migration.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Inventor;

namespace FeatureMigratorLib
{
    public partial class FileOverwriteDlg : Form
    {
        private bool bAllowClose;

        private string _Filename;
        
        private FileManager _FileManager;

        private static bool _AutoOverwrite = false;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // AutoOverwrite = true indicates that the FileOverwriteDlg won't be displayed for
        // Unreferenced documents. These documents will be overwritten on the disk without
        // further notice.
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public bool AutoOverwrite
        {
            set
            {
                _AutoOverwrite = value;
            }
            get
            {
                return _AutoOverwrite;
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public String Filename
        {
            get
            {
                return _Filename;
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public FileOverwriteDlg(string existingDoc)
        {
            InitializeComponent();

            bAllowClose = false;

            _FileManager = FeatureUtilities.Application.FileManager;

            tbFileName.Text = existingDoc;

            _Filename = existingDoc;

            Document document = FeatureUtilities.Application.Documents.Open(_Filename, false);

            DisplayReferencingDocs(document);
            document.Close(true);

            this.FormClosing += new FormClosingEventHandler(FileOverwriteDlg_FormClosing);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void FileOverwriteDlg_FormClosing(object sender, FormClosingEventArgs e)
        {
            //Cannot skip this dialog
            if (e.CloseReason == CloseReason.UserClosing && !bAllowClose)
            {
                DialogResult res = System.Windows.Forms.MessageBox.Show(
                    "A filename must be provided for the new Part Document          " + System.Environment.NewLine +  
                    "generated by the FeatureMigrator." + System.Environment.NewLine 
                    + System.Environment.NewLine +
                    "Click OK to use current filename proposed or" + System.Environment.NewLine + 
                    "Cancel to get back to the File Overwrite dialog.", 
                    "File Overwrite Dialog", 
                    MessageBoxButtons.OKCancel, 
                    MessageBoxIcon.Information);

                if(res == DialogResult.OK)
                {
                    bAllowClose = true;
                    OnOk();
                }

                e.Cancel = true;
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public new DialogResult ShowDialog(IWin32Window owner)
        {
            if (_AutoOverwrite && lvRefDocs.Items.Count == 0)
            {
                return DialogResult.OK;
            }

            return base.ShowDialog(owner);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private void DisplayReferencingDocs(Document document)
        {
            lvRefDocs.Items.Clear();

            foreach (Document refDocument in document.ReferencingDocuments)
            {
                lvRefDocs.Items.Add(refDocument.FullFileName);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private void OnOk()
        {
            _Filename = tbFileName.Text;

            if (_Filename.Substring(_Filename.Length - 3) != "ipt")
            {
                System.Windows.Forms.MessageBox.Show("Filename needs to finish with .ipt extension",
                    "Invalid Filename",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Warning);

                bAllowClose = false;
                return;
            }

            string validFilename;

            System.IO.FileInfo fi = new System.IO.FileInfo(_Filename);

            if (!_FileManager.IsFileNameValid(fi.Name, out validFilename))
            {
                System.Windows.Forms.MessageBox.Show("Filename is not valid, please provide a valid filename",
                    "Invalid Filename",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Warning);

                bAllowClose = false;
                return;
            }

            if (!System.IO.File.Exists(_Filename))
            {
                bAllowClose = true;

                Hide();
                Close();
                return;
            }

            Document document = FeatureUtilities.Application.Documents.Open(_Filename, false);

            int nbRef = document.ReferencingDocuments.Count;

            DisplayReferencingDocs(document);
            document.Close(true);

            if (nbRef != 0)
            {
                string msg = "Specified file exists and is referenced,"
                   + System.Environment.NewLine
                   + "Cannot replace a referenced file."
                   + System.Environment.NewLine
                   + "Please select try a new file name and press Ok again.";

                System.Windows.Forms.MessageBox.Show(msg,
                    "Invalid Filename",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Warning);

                bAllowClose = false;
                return;
            }
            else
            {
                if (!_AutoOverwrite)
                {
                    DialogResult res = System.Windows.Forms.MessageBox.Show("Specified file exists, do you want to overwrite it?",
                       "Existing file",
                       MessageBoxButtons.OKCancel,
                       MessageBoxIcon.Warning, 
                       MessageBoxDefaultButton.Button1);

                    if (res != DialogResult.OK)
                    {
                        bAllowClose = false;
                        return;
                    }
                }

                bAllowClose = true;

                Hide();
                Close();
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private void bOk_Click(object sender, EventArgs e)
        {
            OnOk();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private void cbAuto_CheckedChanged(object sender, EventArgs e)
        {
            _AutoOverwrite = cbAuto.Checked;
        }
    }
}
